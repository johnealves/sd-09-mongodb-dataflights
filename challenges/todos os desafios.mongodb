// Requisitos do projeto.

// 1 - Retorne a quantidade de documentos inseridos na coleção voos.

use('dataFlights');

db.voos.count();

// 2 - Retorne os 10 primeiros documentos com voos da empresa AZUL.

use('dataFlights');

db.voos.find({ "empresa.nome": "AZUL" }).limit(10);

// 3 - Retorne a quantidade de voos da empresa AZUL.

use('dataFlights');

db.voos.count({ "empresa.nome": "AZUL" });

// 4 - Retorne a quantidade de voos da empresa GOL.

use('dataFlights');

db.voos.count({ "empresa.nome": "GOL" });

// 5 - Retorne o vooId do décimo ao décimo segundo documento da coleção voos.

use('dataFlights');

db.voos.find({}, { _id: 0, vooId: 1 }).skip(9).limit(3);

// 6 - Retorne apenas os campos empresa.sigla, empresa.nome e passageiros do voo com o campo vooId igual a 756807.

use('dataFlights');

db.voos.find(
  {
    vooId: 756807
  },
  {
    empresa: { sigla: 1, nome: 1},
    passageiros: 1,
    _id: 0
  }
);

// 7 - Retorne a quantidade de voos em que o ano seja menor do que 2017.

use('dataFlights');

db.voos.count({ ano: { $lt: 2017 } });

// 8 - Retorne a quantidade de voos em que o ano seja maior do que 2016.

use('dataFlights');

db.voos.count({ ano: { $gt: 2016 } });

// 9 - Retorne a quantidade de voos entre os anos de 2017 e 2018.

use('dataFlights');

db.voos.count({ ano: { $gte: 2017, $lte: 2018  } });

// 10 - Retorne apenas os 10 primeiros documentos com voos da empresa GOL do ano de 2017. Exiba apenas os campos vooId, empresa.nome, aeroportoOrigem.nome, aeroportoDestino.nome, mes e ano.

use('dataFlights');

db.voos.find(
  { 
    "empresa.nome": "GOL",
    ano: 2017
  },
  {
    _id: 0,
    vooId: 1,
    "empresa.nome": 1,
    "aeroportoOrigem.nome": 1,
    "aeroportoDestino.nome": 1,
    mes: 1,
    ano: 1
  }
).limit(10);

// 11 - Retorne a quantidade de documentos em que o campo aeroportoDestino.pais não seja igual a ESTADOS UNIDOS.

use('dataFlights');

db.voos.count(
  {
    "aeroportoDestino.pais": { $ne: "ESTADOS UNIDOS"}
  }
);

// 12 - Retorne a quantidade de documentos em que o campo aeroportoDestino.pais seja igual a BRASIL, ARGENTINA ou CHILE.

use('dataFlights');

db.voos.count(
  {
    "aeroportoDestino.pais": { $in: [
      "BRASIL",
      "ARGENTINA",
      "CHILE",
      ]
    }
  },
);

// 13 - Retorne a quantidade de documentos em que o campo aeroportoDestino.continente não seja igual a EUROPA, ÁSIA e OCEANIA.

use('dataFlights');

db.voos.count(
  {
    "aeroportoDestino.continente": { $nin: [
      "EUROPA",
      "ÁSIA",
      "OCEANIA",
      ]
    }
  },
);

// 14 - Retorne o total de voos em que o país de origem não seja BRASIL.

use('dataFlights');

db.voos.count({
  "aeroportoOrigem.pais": {
    $ne: "BRASIL",
  },
});

// 15 - Retorne o total de voos com mais de 20 decolagens.

use('dataFlights');

db.voos.count({
  decolagens: { $gt: 20},
});

// 16 - Retorne o total de voos em que o campo natureza possui o valor Internacional.

use('dataFlights');

db.voos.count({
  natureza: "Internacional",
});

// 17 - Retorne o total de voos em que o campo natureza possui o valor Doméstica.

use('dataFlights');

db.voos.count({
  natureza: "Doméstica",
});

// 18 - Retorne o vooId, mes e ano do primeiro voo com mais de 7000 passageiros pagos.

use('dataFlights');

db.voos.findOne(
  { passageiros: { $gt: 7000 } },
  { vooId: 1, mes: 1, ano: 1, _id: 0 }
);

// 19 - Retorne o vooId do primeiro voo em que o campo litrosCombustivel exista.

use('dataFlights');

db.voos.count();

// 20 - Retorne o vooId do primeiro voo em que o campo rtk não exista.

use('dataFlights');

db.voos.count();

// 21 - Retorne o vooId do primeiro voo em que o campo litrosCombustivel seja maior ou igual a 1000.

use('dataFlights');

db.voos.count();

// 22 - Retorne o vooId do primeiro voo em que a empresa seja DELTA AIRLINES ou AMERICAN AIRLINES, a sigla do aeroporto de origem seja SBGR e a sigla do aeroporto de destino seja KJFK.

use('dataFlights');

db.voos.count();

// 23 - Retorne o vooId e litrosCombustivel do primeiro voo em que o campo litrosCombustivel não seja maior do que 1000 e o campo litrosCombustivel exista.

use('dataFlights');

db.voos.count();

// 24 - Retorne o vooId, empresa.nome e litrosCombustivel do primeiro voo em que litrosCombustivel não seja maior do que 600 e a empresa não seja GOL ou AZUL, e o campo litrosCombustivel exista.

use('dataFlights');

db.voos.count();

// 25 - Remova todos os voos da empresa AZUL em que a quantidade de combustível seja menor do que 400. Informe a quantidade de documentos removidos.

use('dataFlights');

db.voos.count();

// 26 - Remova todos os voos da empresa GOL em que a quantidade de passageiros pagos esteja entre 5 e 10, incluindo os casos em que a quantidade é 5 e 10. Informe a quantidade de documentos removidos.

use('dataFlights');

db.voos.count();

// 27 - Retorne a quantidade total de voos de natureza Doméstica que a empresa PASSAREDO possui, via uso de uma nova coleção chamada resumoVoos.


use('dataFlights');

db.voos.count();

// 28 - Retorne a quantidade total de voos de natureza Doméstica que a empresa LATAM AIRLINES BRASIL possui, via uso de uma nova coleção chamada resumoVoos.

use('dataFlights');

db.voos.count();

// 

use('dataFlights');

db.voos.count();

// 

use('dataFlights');

db.voos.count();































